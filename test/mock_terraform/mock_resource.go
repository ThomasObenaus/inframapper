// Code generated by MockGen. DO NOT EDIT.
// Source: terraform/resource.go

// Package mock_terraform is a generated GoMock package.
package mock_terraform

import (
	gomock "github.com/golang/mock/gomock"
	terraform "github.com/thomas.obenaus/terrastate/terraform"
	reflect "reflect"
)

// MockResource is a mock of Resource interface
type MockResource struct {
	ctrl     *gomock.Controller
	recorder *MockResourceMockRecorder
}

// MockResourceMockRecorder is the mock recorder for MockResource
type MockResourceMockRecorder struct {
	mock *MockResource
}

// NewMockResource creates a new mock instance
func NewMockResource(ctrl *gomock.Controller) *MockResource {
	mock := &MockResource{ctrl: ctrl}
	mock.recorder = &MockResourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResource) EXPECT() *MockResourceMockRecorder {
	return m.recorder
}

// Id mocks base method
func (m *MockResource) Id() string {
	ret := m.ctrl.Call(m, "Id")
	ret0, _ := ret[0].(string)
	return ret0
}

// Id indicates an expected call of Id
func (mr *MockResourceMockRecorder) Id() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Id", reflect.TypeOf((*MockResource)(nil).Id))
}

// Name mocks base method
func (m *MockResource) Name() string {
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockResourceMockRecorder) Name() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockResource)(nil).Name))
}

// Type mocks base method
func (m *MockResource) Type() terraform.Type {
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(terraform.Type)
	return ret0
}

// Type indicates an expected call of Type
func (mr *MockResourceMockRecorder) Type() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockResource)(nil).Type))
}

// Dependencies mocks base method
func (m *MockResource) Dependencies() []string {
	ret := m.ctrl.Call(m, "Dependencies")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Dependencies indicates an expected call of Dependencies
func (mr *MockResourceMockRecorder) Dependencies() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dependencies", reflect.TypeOf((*MockResource)(nil).Dependencies))
}

// Provider mocks base method
func (m *MockResource) Provider() string {
	ret := m.ctrl.Call(m, "Provider")
	ret0, _ := ret[0].(string)
	return ret0
}

// Provider indicates an expected call of Provider
func (mr *MockResourceMockRecorder) Provider() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Provider", reflect.TypeOf((*MockResource)(nil).Provider))
}

// String mocks base method
func (m *MockResource) String() string {
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *MockResourceMockRecorder) String() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockResource)(nil).String))
}
