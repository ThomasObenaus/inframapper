// Code generated by MockGen. DO NOT EDIT.
// Source: tfstate/iface/s3_downloader.go

// Package mock_iface is a generated GoMock package.
package mock_iface

import (
	s3 "github.com/aws/aws-sdk-go/service/s3"
	s3manager "github.com/aws/aws-sdk-go/service/s3/s3manager"
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockS3DownloaderAPI is a mock of S3DownloaderAPI interface
type MockS3DownloaderAPI struct {
	ctrl     *gomock.Controller
	recorder *MockS3DownloaderAPIMockRecorder
}

// MockS3DownloaderAPIMockRecorder is the mock recorder for MockS3DownloaderAPI
type MockS3DownloaderAPIMockRecorder struct {
	mock *MockS3DownloaderAPI
}

// NewMockS3DownloaderAPI creates a new mock instance
func NewMockS3DownloaderAPI(ctrl *gomock.Controller) *MockS3DownloaderAPI {
	mock := &MockS3DownloaderAPI{ctrl: ctrl}
	mock.recorder = &MockS3DownloaderAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockS3DownloaderAPI) EXPECT() *MockS3DownloaderAPIMockRecorder {
	return m.recorder
}

// Download mocks base method
func (m *MockS3DownloaderAPI) Download(arg0 io.WriterAt, arg1 *s3.GetObjectInput, arg2 ...func(*s3manager.Downloader)) (int64, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Download", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Download indicates an expected call of Download
func (mr *MockS3DownloaderAPIMockRecorder) Download(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockS3DownloaderAPI)(nil).Download), varargs...)
}
